using System;
using System.Reactive;
using System.Threading.Tasks;
using Aictionary.Models;
using Aictionary.Services;
using ReactiveUI;

namespace Aictionary.ViewModels;

public class MainWindowViewModel : ViewModelBase
{
    private readonly IDictionaryService _dictionaryService;
    private readonly IOpenAIService _openAIService;
    private readonly ISettingsService _settingsService;

    private string _searchText = string.Empty;
    private WordDefinition? _currentDefinition;
    private bool _isLoading;
    private string _errorMessage = string.Empty;

    public event EventHandler? OpenSettingsRequested;

    public MainWindowViewModel(
        IDictionaryService dictionaryService,
        IOpenAIService openAIService,
        ISettingsService settingsService)
    {
        _dictionaryService = dictionaryService;
        _openAIService = openAIService;
        _settingsService = settingsService;

        SearchCommand = ReactiveCommand.CreateFromTask(
            SearchAsync,
            this.WhenAnyValue(x => x.SearchText, text => !string.IsNullOrWhiteSpace(text))
        );

        OpenSettingsCommand = ReactiveCommand.Create(OpenSettings);
    }

    public string SearchText
    {
        get => _searchText;
        set => this.RaiseAndSetIfChanged(ref _searchText, value);
    }

    public WordDefinition? CurrentDefinition
    {
        get => _currentDefinition;
        set => this.RaiseAndSetIfChanged(ref _currentDefinition, value);
    }

    public bool IsLoading
    {
        get => _isLoading;
        set => this.RaiseAndSetIfChanged(ref _isLoading, value);
    }

    public string ErrorMessage
    {
        get => _errorMessage;
        set => this.RaiseAndSetIfChanged(ref _errorMessage, value);
    }

    public ReactiveCommand<Unit, Unit> SearchCommand { get; }
    public ReactiveCommand<Unit, Unit> OpenSettingsCommand { get; }

    private async Task SearchAsync()
    {
        IsLoading = true;
        ErrorMessage = string.Empty;
        CurrentDefinition = null;

        System.Console.WriteLine($"[MainViewModel] SearchAsync START for word: '{SearchText}'");

        try
        {
            // First, try to get from local cache
            System.Console.WriteLine("[MainViewModel] Attempting to get definition from cache...");
            var definition = await _dictionaryService.GetDefinitionAsync(SearchText);
            var fromCache = definition != null;

            if (fromCache)
            {
                System.Console.WriteLine("[MainViewModel] Definition found in cache");
            }
            else
            {
                System.Console.WriteLine("[MainViewModel] Definition not found in cache");
            }

            if (definition == null)
            {
                // If not found in cache, query OpenAI
                System.Console.WriteLine("[MainViewModel] Querying OpenAI for definition...");
                definition = await _openAIService.GenerateDefinitionAsync(SearchText);

                // Save the AI-generated definition to cache
                if (definition != null)
                {
                    System.Console.WriteLine("[MainViewModel] AI generated definition successfully, saving to cache...");
                    await _dictionaryService.SaveDefinitionAsync(definition);
                    System.Console.WriteLine("[MainViewModel] Definition saved to cache");
                }
                else
                {
                    System.Console.WriteLine("[MainViewModel] OpenAI returned null definition");
                }
            }

            if (definition != null)
            {
                CurrentDefinition = definition;
                if (!fromCache)
                {
                    ErrorMessage = "Definition generated by AI and saved to cache.";
                }
                System.Console.WriteLine("[MainViewModel] Definition set successfully");
            }
            else
            {
                System.Console.WriteLine("[MainViewModel] ERROR: No definition available (both cache and AI failed)");
                ErrorMessage = "Could not find or generate definition for this word. Check console logs for details.";
            }
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"[MainViewModel] EXCEPTION in SearchAsync: {ex.GetType().Name}");
            System.Console.WriteLine($"[MainViewModel] Exception message: {ex.Message}");
            System.Console.WriteLine($"[MainViewModel] Stack trace: {ex.StackTrace}");
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            System.Console.WriteLine("[MainViewModel] SearchAsync END");
        }
    }

    private void OpenSettings()
    {
        OpenSettingsRequested?.Invoke(this, EventArgs.Empty);
    }
}
